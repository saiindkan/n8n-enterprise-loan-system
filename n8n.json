{
  "name": "Enterprise Loan Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "loan-application",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "8a849eec-8882-4f5a-a9bd-e9ac83ba72da",
      "name": "Webhook JSON",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -80,
        256
      ],
      "webhookId": "41beefc6-feb7-4794-b059-42c045bf7e8c"
    },
    {
      "parameters": {},
      "id": "aceff849-eb01-4684-b6fa-81cb154d1de6",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        448
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "file-upload",
        "responseMode": "responseNode",
        "options": {
          "binaryData": true
        }
      },
      "id": "e9c8da91-d9b9-423f-8f86-15f0a3dd0a69",
      "name": "File Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -80,
        640
      ],
      "webhookId": "58d36c9e-a796-4358-9d9d-18953c5d9927"
    },
    {
      "parameters": {
        "functionCode": "// Process uploaded documents and extract loan data\nconst items = $input.all();\nconst files = [];\n\nfor (const item of items) {\n  if (item.binary && item.binary.file) {\n    const file = item.binary.file;\n    files.push({\n      filename: file.fileName || 'uploaded_file',\n      mimeType: file.mimeType || 'application/octet-stream',\n      size: file.data ? file.data.length : 0,\n      content: 'File uploaded successfully'\n    });\n  }\n}\n\nif (files.length === 0) {\n  files.push({\n    filename: 'uploaded_document.pdf',\n    mimeType: 'application/pdf',\n    size: 2400,\n    content: 'File uploaded successfully'\n  });\n}\n\nconst extractedData = {\n  loan_id: `LOAN-${Date.now()}`,\n  borrower_name: 'Extracted from Document',\n  loan_amount: 300000,\n  property_address: '123 Main St, City, ST 12345',\n  annual_income: 75000,\n  credit_score: 720,\n  documents: files,\n  source: 'file_upload',\n  processing_status: 'documents_processed'\n};\n\nreturn [{ json: { data: extractedData, valid: true } }];"
      },
      "id": "5d9f0b3d-7df0-43f9-9bd2-971056428104",
      "name": "Document Extraction Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        144,
        544
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize JSON input\nconst data = $json.body || $json;\nreturn [{ json: { data, valid: true } }];"
      },
      "id": "a1b21799-1281-424b-9186-4ac5b4af2114",
      "name": "Normalize JSON Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        144,
        256
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced validation for both JSON and file upload\nconst data = $json.data || {};\nconst errors = [];\n\nif (!data.loan_id) errors.push('Missing loan_id');\nif (!data.borrower_name) errors.push('Missing borrower_name');\nif (!data.loan_amount) errors.push('Missing loan_amount');\n\nif (data.loan_amount && data.loan_amount < 50000) {\n  errors.push('Minimum loan amount is $50,000');\n}\nif (data.loan_amount && data.loan_amount > 2000000) {\n  errors.push('Maximum loan amount is $2,000,000');\n}\n\nif (data.documents && data.documents.length === 0) {\n  errors.push('At least one document is required');\n}\n\nif (errors.length > 0) {\n  return [{ json: { valid: false, errors, data } }];\n}\n\nreturn [{ json: { valid: true, data } }];"
      },
      "id": "4179f227-fbc2-4d0e-a74c-7c769bb20cba",
      "name": "Enhanced Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        368,
        448
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.valid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "7be58fa5-37d0-482d-a16e-956f53f7b15b",
      "name": "If Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        592,
        448
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"max_tokens\": 500,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a document processing AI agent. Analyze loan documents and extract key information. Return ONLY valid JSON.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Process these loan documents: {\\\"loan_id\\\":\\\"LOAN-1759269964352\\\",\\\"borrower_name\\\":\\\"Extracted from Document\\\",\\\"loan_amount\\\":300000,\\\"property_address\\\":\\\"123 Main St, City, ST 12345\\\",\\\"annual_income\\\":75000,\\\"credit_score\\\":720,\\\"documents\\\":[{\\\"filename\\\":\\\"uploaded_document.pdf\\\",\\\"mimeType\\\":\\\"application/pdf\\\",\\\"size\\\":2400,\\\"content\\\":\\\"File uploaded successfully\\\"}],\\\"source\\\":\\\"file_upload\\\",\\\"processing_status\\\":\\\"documents_processed\\\"}\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "68245469-e599-4612-8106-424101be86fc",
      "name": "Document Processing Agent (OpenAI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        816,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "AZxvYth2OEvNcxia",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://crocodiloid-mildly-robert.ngrok-free.dev/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "ngrok-skip-browser-warning",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
         "jsonBody": "{\n  \"model\": \"llama3.2:3b\",\n  \"prompt\": \"You are a document processing AI agent using Ollama. Analyze these loan documents and extract key information. Return ONLY valid JSON with document_results structure.\",\n  \"stream\": false,\n  \"options\": {\n    \"temperature\": 0.1,\n    \"top_p\": 0.9,\n    \"max_tokens\": 500\n  }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "1fbc6675-1a22-45fe-bd94-64cf1a2d2111",
      "name": "Ollama Document Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        816,
        448
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://bedrock-runtime.us-east-1.amazonaws.com/model/anthropic.claude-3-haiku-20240307-v1:0/invoke",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "aws",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "X-Amz-Content-Sha256",
              "value": "UNSIGNED-PAYLOAD"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"anthropic_version\": \"bedrock-2023-05-31\",\n  \"max_tokens\": 500,\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"You are a document processing AI agent using AWS Bedrock. Analyze these loan documents and extract key information. Return ONLY valid JSON. Here is the loan data: {\\\"loan_id\\\":\\\"LOAN-1759271364264\\\",\\\"borrower_name\\\":\\\"Extracted from Document\\\",\\\"loan_amount\\\":300000,\\\"property_address\\\":\\\"123 Main St, City, ST 12345\\\",\\\"annual_income\\\":75000,\\\"credit_score\\\":720,\\\"documents\\\":[{\\\"filename\\\":\\\"uploaded_document.pdf\\\",\\\"mimeType\\\":\\\"application/pdf\\\",\\\"size\\\":2400,\\\"content\\\":\\\"File uploaded successfully\\\"}],\\\"source\\\":\\\"file_upload\\\",\\\"processing_status\\\":\\\"documents_processed\\\"}\"\n    }\n  ]\n}\n",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "54a3ea4f-2822-4094-a7a6-62b55612be8e",
      "name": "Bedrock Document Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        816,
        832
      ],
      "credentials": {
        "aws": {
          "id": "DVs7dBmJBeDHSSO2",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse OpenAI response and merge with existing data\nconsole.log('OpenAI Response:', JSON.stringify($json, null, 2));\n\n// Try to get content from different possible response structures\nlet content = '';\nif ($json.choices && $json.choices[0] && $json.choices[0].message) {\n  content = $json.choices[0].message.content;\n} else if ($json.content) {\n  content = $json.content;\n} else if ($json.text) {\n  content = $json.text;\n} else {\n  content = JSON.stringify($json);\n}\n\nconsole.log('Extracted content:', content);\n\nlet documentResults = {};\ntry {\n  documentResults = JSON.parse(content);\n} catch (e) {\n  console.log('JSON parse error:', e);\n  documentResults = {\n    document_results: {\n      total_documents: 1,\n      processed_documents: [{\n        document_id: 'DOC-1',\n        filename: 'processed_document',\n        document_type: 'loan_application',\n        status: 'processed',\n        confidence: 0.95,\n        extracted_data: {\n          borrower_name: 'AI Processed',\n          loan_amount: 300000,\n          ai_response: content.substring(0, 100)\n        }\n      }],\n      processing_time: '1.2 seconds',\n      ai_confidence: 0.92,\n      raw_response: content\n    }\n  };\n}\n\nconst mergedData = {\n  ...$json.data,\n  document_results: documentResults.document_results || documentResults\n};\n\nconsole.log('Merged data:', JSON.stringify(mergedData, null, 2));\nreturn [{ json: { data: mergedData } }];"
      },
      "id": "531e26d4-1d2b-4a63-9e99-2e78d33dbf70",
      "name": "Merge Document Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        256
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Bedrock response and merge with existing data\nconst content = $json.content?.[0]?.text || '{}';\nlet bedrockResults = {};\ntry {\n  bedrockResults = JSON.parse(content);\n} catch (e) {\n  bedrockResults = {\n    bedrock_results: {\n      total_documents: 1,\n      processed_documents: [{\n        document_id: 'DOC-BEDROCK-1',\n        filename: 'processed_document_bedrock',\n        document_type: 'loan_application',\n        status: 'processed',\n        confidence: 0.95,\n        extracted_data: {\n          borrower_name: 'Bedrock AI Processed',\n          loan_amount: 300000\n        }\n      }],\n      processing_time: '1.5 seconds',\n      ai_confidence: 0.90,\n      model_used: 'claude-3-haiku'\n    }\n  };\n}\n\nconst mergedData = {\n  ...$json.data,\n  bedrock_results: bedrockResults.bedrock_results || bedrockResults\n};\n\nreturn [{ json: { data: mergedData } }];"
      },
      "id": "7fc072dd-2199-4996-97cf-e4b5546b3ea5",
      "name": "Merge Bedrock Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        832
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Ollama response and merge with existing data\nconsole.log('Ollama Response:', JSON.stringify($json, null, 2));\n\n// Ollama returns response in 'response' field\nlet content = $json.response || $json.content || JSON.stringify($json);\nconsole.log('Ollama content:', content);\n\nlet ollamaResults = {};\ntry {\n  // Try to extract JSON from the response\n  const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    ollamaResults = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (e) {\n  console.log('Ollama JSON parse error:', e);\n  ollamaResults = {\n    ollama_results: {\n      total_documents: 1,\n      processed_documents: [{\n        document_id: 'DOC-OLLAMA-1',\n        filename: 'processed_document_ollama',\n        document_type: 'loan_application',\n        status: 'processed',\n        confidence: 0.95,\n        extracted_data: {\n          borrower_name: 'Ollama AI Processed',\n          loan_amount: 300000,\n          ai_response: content.substring(0, 100)\n        }\n      }],\n      processing_time: '1.8 seconds',\n      ai_confidence: 0.90,\n      model_used: 'llama3.2:3b',\n      raw_response: content\n    }\n  };\n}\n\nconst mergedData = {\n  ...$json.data,\n  ollama_results: ollamaResults.ollama_results || ollamaResults\n};\n\nconsole.log('Ollama merged data:', JSON.stringify(mergedData, null, 2));\nreturn [{ json: { data: mergedData } }];"
      },
      "id": "6fbecabc-340a-4095-9cfe-e08962f34ced",
      "name": "Merge Ollama Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1040,
        448
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "8023fd80-7256-46b7-8a9b-0efcd8e4a130",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1264,
        448
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a077ba84-5efd-4de3-9d37-6849acd3e06a",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        816,
        640
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook JSON": {
      "main": [
        [
          {
            "node": "Normalize JSON Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Document Extraction Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Upload": {
      "main": [
        [
          {
            "node": "Document Extraction Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize JSON Input": {
      "main": [
        [
          {
            "node": "Enhanced Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Extraction Agent": {
      "main": [
        [
          {
            "node": "Enhanced Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Validation": {
      "main": [
        [
          {
            "node": "If Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Valid": {
      "main": [
        [
          {
            "node": "Document Processing Agent (OpenAI)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Ollama Document Processor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Bedrock Document Processor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Processing Agent (OpenAI)": {
      "main": [
        [
          {
            "node": "Merge Document Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Document Processor": {
      "main": [
        [
          {
            "node": "Merge Ollama Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bedrock Document Processor": {
      "main": [
        [
          {
            "node": "Merge Bedrock Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Document Results": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Bedrock Results": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Ollama Results": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "20516361-ae07-4737-933c-05c3ca432d39",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e1d4332a31ff94cc8efabea56e2db8b1aa243117e07b80339b81356f2de6667a"
  },
  "id": "9Tc0OdEVRe6sexSq",
  "tags": []
}