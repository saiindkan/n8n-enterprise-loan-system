{
  "name": "Enterprise Loan Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "loan-application",
        "responseMode": "responseNode"
      },
      "id": "webhook-json",
      "name": "Webhook JSON",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "document-upload",
        "responseMode": "responseNode",
        "options": {
          "binaryData": true
        }
      },
      "id": "webhook-upload",
      "name": "Webhook File Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process uploaded documents and extract loan data\nconst items = $input.all();\nconst files = [];\n\n// Extract file information from binary data\nfor (const item of items) {\n  if (item.binary && item.binary.file) {\n    const file = item.binary.file;\n    files.push({\n      filename: file.fileName || 'uploaded_file',\n      mimeType: file.mimeType || 'application/octet-stream',\n      size: file.data ? file.data.length : 0,\n      content: 'File uploaded successfully'\n    });\n  }\n}\n\n// If no files found, create a mock file entry\nif (files.length === 0) {\n  files.push({\n    filename: 'uploaded_document.pdf',\n    mimeType: 'application/pdf',\n    size: 2400,\n    content: 'File uploaded successfully'\n  });\n}\n\n// Simulate document processing and data extraction\nconst extractedData = {\n  loan_id: `LOAN-${Date.now()}`,\n  borrower_name: 'Extracted from Document',\n  loan_amount: 300000,\n  property_address: '123 Main St, City, ST 12345',\n  annual_income: 75000,\n  credit_score: 720,\n  documents: files,\n  source: 'file_upload',\n  processing_status: 'documents_processed'\n};\n\nreturn [{ data: extractedData, valid: true }];"
      },
      "id": "function-extract",
      "name": "Document Extraction Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 400]
    },
    {
      "parameters": {
        "functionCode": "// Normalize JSON input\nconst data = $json.body || $json;\nreturn [{ data, valid: true }];"
      },
      "id": "function-normalize",
      "name": "Normalize JSON Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced validation for both JSON and file upload\nconst data = $json.data || {};\nconst errors = [];\n\n// Required fields\nif (!data.loan_id) errors.push('Missing loan_id');\nif (!data.borrower_name) errors.push('Missing borrower_name');\nif (!data.loan_amount) errors.push('Missing loan_amount');\n\n// Business rules\nif (data.loan_amount && data.loan_amount < 50000) {\n  errors.push('Minimum loan amount is $50,000');\n}\nif (data.loan_amount && data.loan_amount > 2000000) {\n  errors.push('Maximum loan amount is $2,000,000');\n}\n\n// Document validation\nif (data.documents && data.documents.length === 0) {\n  errors.push('At least one document is required');\n}\n\nif (errors.length > 0) {\n  return [{ valid: false, errors, data }];\n}\n\nreturn [{ valid: true, data }];"
      },
      "id": "function-validation",
      "name": "Enhanced Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.valid }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "if-valid",
      "name": "If Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "functionCode": "// Simple AI agent simulation\nconst data = $json.data;\n\n// Simulate AI processing\nconst result = {\n  loan_id: data.loan_id,\n  borrower_name: data.borrower_name,\n  loan_amount: data.loan_amount,\n  decision: 'APPROVED',\n  risk_score: 75,\n  interest_rate: 4.5,\n  processing_time: '2.3 seconds',\n  ai_confidence: 0.87\n};\n\nreturn [{ result }];"
      },
      "id": "function-ai-agent",
      "name": "AI Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 100]
    },
    {
      "parameters": {
        "responseMode": "lastNode",
        "responseData": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"loan_decision\": {{ JSON.stringify($json.result) }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-success",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "responseMode": "lastNode",
        "responseData": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Validation failed\",\n  \"errors\": {{ JSON.stringify($json.errors) }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-error",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Webhook JSON": {
      "main": [
        [
          {
            "node": "Normalize JSON Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook File Upload": {
      "main": [
        [
          {
            "node": "Document Extraction Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize JSON Input": {
      "main": [
        [
          {
            "node": "Enhanced Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Extraction Agent": {
      "main": [
        [
          {
            "node": "Enhanced Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Validation": {
      "main": [
        [
          {
            "node": "If Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Valid": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "id": "enterprise-loan-workflow-001",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "1"
}