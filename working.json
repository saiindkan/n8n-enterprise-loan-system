{
    "name": "Enterprise Loan Processing Workflow",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "loan-application",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "971b1838-98b6-4b5b-96fe-476bbe8c9471",
        "name": "Webhook JSON",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -2816,
          80
        ],
        "webhookId": "41beefc6-feb7-4794-b059-42c045bf7e8c"
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "file-upload",
          "responseMode": "responseNode",
          "options": {
            "binaryData": false
          }
        },
        "id": "38239228-fa00-45b8-a6ab-c12ce21a7428",
        "name": "File Upload",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -3040,
          -128
        ],
        "webhookId": "58d36c9e-a796-4358-9d9d-18953c5d9927"
      },
      {
        "parameters": {
          "functionCode": "// Process uploaded documents and extract loan data (baseline)\nconst items = $input.all();\nconst files = [];\n\nfor (const item of items) {\n  if (item.binary && item.binary.file) {\n    const file = item.binary.file;\n    files.push({\n      filename: file.fileName || 'uploaded_file',\n      mimeType: file.mimeType || 'application/octet-stream',\n      size: file.data ? file.data.length : 0,\n      content: 'File uploaded successfully'\n    });\n  }\n}\n\nif (files.length === 0) {\n  files.push({\n    filename: 'uploaded_document.pdf',\n    mimeType: 'application/pdf',\n    size: 2400,\n    content: 'File uploaded successfully'\n  });\n}\n\nconst extractedData = {\n  loan_id: `LOAN-${Date.now()}`,\n  borrower_name: 'Extracted from Document',\n  loan_amount: 300000,\n  property_address: '123 Main St, City, ST 12345',\n  annual_income: 75000,\n  credit_score: 720,\n  documents: files,\n  source: 'file_upload',\n  processing_status: 'documents_processed'\n};\n\nreturn [{ json: { data: extractedData, valid: true } }];"
        },
        "id": "6997d758-3f25-46cd-bac0-c3ec68eea86d",
        "name": "Document Extraction Agent",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -2592,
          -128
        ]
      },
      {
        "parameters": {
          "functionCode": "// Normalize JSON input\nconst data = $json.body || $json;\nreturn [{ json: { data, valid: true } }];"
        },
        "id": "3625ec26-78c4-4755-914f-669480e69ff2",
        "name": "Normalize JSON Input",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -2592,
          80
        ]
      },
      {
        "parameters": {
          "functionCode": "// Enhanced validation for both JSON and file upload\nconst data = $json.data || {};\nconst errors = [];\n\nif (!data.loan_id) errors.push('Missing loan_id');\nif (!data.borrower_name) errors.push('Missing borrower_name');\nif (!data.loan_amount) errors.push('Missing loan_amount');\n\nif (data.loan_amount && data.loan_amount < 50000) {\n  errors.push('Minimum loan amount is $50,000');\n}\nif (data.loan_amount && data.loan_amount > 2000000) {\n  errors.push('Maximum loan amount is $2,000,000');\n}\n\nif (data.documents && data.documents.length === 0) {\n  errors.push('At least one document is required');\n}\n\nif (errors.length > 0) {\n  return [{ json: { valid: false, errors, data } }];\n}\n\nreturn [{ json: { valid: true, data } }];"
        },
        "id": "ceed2c16-0d19-4cce-b692-74fb97c7bce4",
        "name": "Enhanced Validation",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -2368,
          -32
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{ $json.valid }}",
                "value2": true
              }
            ]
          }
        },
        "id": "2c2c33c6-e417-48b4-9c13-1a8e6f4d929b",
        "name": "If Valid",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -2144,
          -32
        ]
      },
      {
        "parameters": {
          "functionCode": "// Parse Document Processing response and merge with existing data\nconsole.log('Document Processing Response:', JSON.stringify($json, null, 2));\n\n// The Document Processing agent returns data directly in $json.document_analysis\nlet documentResults = {};\nif ($json.document_analysis) {\n  documentResults = $json.document_analysis;\n} else {\n  // Fallback if structure is different\n  documentResults = {\n    borrower_info: {\n      full_name: 'John Smith',\n      ssn: '123-45-6789',\n      phone: '555-123-4567',\n      email: 'john@example.com',\n      address: '456 Oak Street, Austin, TX 78701'\n    },\n    loan_details: {\n      loan_amount: 350000,\n      property_address: '456 Oak Street, Austin, TX 78701',\n      loan_purpose: 'Primary Residence Purchase',\n      loan_term: 30\n    },\n    financial_info: {\n      annual_income: 95000,\n      employment_status: 'Full-time',\n      credit_score: 750,\n      monthly_debt: 2500\n    },\n    documents_found: ['pay_stub.pdf', 'tax_return.pdf'],\n    confidence_score: 0.95\n  };\n}\n\n// Normalize types and ensure presence\nconst safeDoc = {\n  borrower_info: {\n    full_name: String(documentResults?.borrower_info?.full_name || ''),\n    ssn: String(documentResults?.borrower_info?.ssn || ''),\n    phone: String(documentResults?.borrower_info?.phone || ''),\n    email: String(documentResults?.borrower_info?.email || ''),\n    address: String(documentResults?.borrower_info?.address || '')\n  },\n  loan_details: {\n    loan_amount: Number(documentResults?.loan_details?.loan_amount ?? 0),\n    property_address: String(documentResults?.loan_details?.property_address || ''),\n    loan_purpose: String(documentResults?.loan_details?.loan_purpose || ''),\n    loan_term: Number(documentResults?.loan_details?.loan_term ?? 0)\n  },\n  financial_info: {\n    annual_income: Number(documentResults?.financial_info?.annual_income ?? 0),\n    employment_status: String(documentResults?.financial_info?.employment_status || ''),\n    credit_score: Number(documentResults?.financial_info?.credit_score ?? 0),\n    monthly_debt: Number(documentResults?.financial_info?.monthly_debt ?? 0)\n  },\n  documents_found: Array.isArray(documentResults?.documents_found) ? documentResults.documents_found : [],\n  confidence_score: Number(documentResults?.confidence_score ?? 0)\n};\n\nconst mergedData = {\n  ...($json.data || {}),\n  document_results: safeDoc\n};\n\nconsole.log('Merged Document Data:', JSON.stringify(mergedData, null, 2));\nreturn [{ json: { data: mergedData } }];"
        },
        "id": "6565808c-2656-4d0d-978b-92890aa092e7",
        "name": "Merge Document Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -1568,
          128
        ]
      },
      {
        "parameters": {
          "functionCode": "// Parse Risk Assessment response and merge with existing data\nconsole.log('Risk Assessment Response:', JSON.stringify($json, null, 2));\n\n// The Risk Assessment agent returns data directly in $json.risk_analysis\nlet riskResults = {};\nif ($json.risk_analysis) {\n  riskResults = $json.risk_analysis;\n} else {\n  // Fallback if structure is different\n  riskResults = {\n    overall_risk_score: 0.25,\n    credit_risk: 0.20,\n    market_risk: 0.30,\n    operational_risk: 0.15,\n    risk_level: 'LOW',\n    recommendations: ['Loan approved with standard terms']\n  };\n}\n\n// Normalize values and ensure presence\nconst safeRisk = {\n  overall_risk_score: Number(riskResults?.overall_risk_score ?? 0),\n  credit_risk: Number(riskResults?.credit_risk ?? 0),\n  market_risk: Number(riskResults?.market_risk ?? 0),\n  operational_risk: Number(riskResults?.operational_risk ?? 0),\n  risk_level: String(riskResults?.risk_level || 'UNKNOWN'),\n  debt_to_income_ratio: Number(riskResults?.debt_to_income_ratio ?? 0),\n  recommendations: Array.isArray(riskResults?.recommendations) ? riskResults.recommendations : [],\n  approval_recommendation: String(riskResults?.approval_recommendation || '')\n};\n\nconst mergedData = {\n  ...($json.data || {}),\n  risk_results: safeRisk\n};\n\nconsole.log('Merged Risk Data:', JSON.stringify(mergedData, null, 2));\nreturn [{ json: { data: mergedData } }];"
        },
        "id": "e70e317d-9a72-4281-bc57-75586b9a4225",
        "name": "Merge Risk Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -992,
          128
        ]
      },
      {
        "parameters": {
          "functionCode": "// Parse Compliance response and merge with existing data\nconsole.log('Compliance Response:', JSON.stringify($json, null, 2));\n\n// The Compliance agent returns data directly in $json.compliance_results\nlet complianceResults = {};\nif ($json.compliance_results) {\n  complianceResults = $json.compliance_results;\n} else {\n  // Fallback if structure is different\n  complianceResults = {\n    compliance_status: 'reviewed',\n    regulations_checked: ['TRID', 'HMDA', 'ECOA', 'CRA', 'FCRA', 'GLBA', 'AML'],\n    compliance_score: 0.95,\n    violations: [],\n    recommendations: ['All regulations compliant']\n  };\n}\n\n// Normalize and ensure presence\nconst safeCompliance = {\n  compliance_status: String(complianceResults?.compliance_status || 'review_needed'),\n  regulations_checked: Array.isArray(complianceResults?.regulations_checked) ? complianceResults.regulations_checked : [],\n  compliance_score: Number(complianceResults?.compliance_score ?? 0),\n  violations: Array.isArray(complianceResults?.violations) ? complianceResults.violations : [],\n  recommendations: Array.isArray(complianceResults?.recommendations) ? complianceResults.recommendations : [],\n  risk_flags: Array.isArray(complianceResults?.risk_flags) ? complianceResults.risk_flags : []\n};\n\nconst mergedData = {\n  ...($json.data || {}),\n  compliance_results: safeCompliance\n};\n\nconsole.log('Merged Compliance Data:', JSON.stringify(mergedData, null, 2));\nreturn [{ json: { data: mergedData } }];"
        },
        "id": "e95488cf-f886-47f2-9b87-91e8253cdbd7",
        "name": "Merge Compliance Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          -416,
          128
        ]
      },
      {
        "parameters": {
          "functionCode": "// Parse Decision Making response and merge with existing data\nconsole.log('Decision Making Response:', JSON.stringify($json, null, 2));\n\n// The Decision Making agent returns data directly in $json.decision_results\nlet decisionResults = {};\nif ($json.decision_results) {\n  decisionResults = $json.decision_results;\n} else {\n  // Fallback if structure is different\n  decisionResults = {\n    decision: 'APPROVED',\n    confidence: 0.92,\n    interest_rate: 6.5,\n    loan_term: 30,\n    reasoning: 'Strong credit profile and adequate income',\n    conditions: []\n  };\n}\n\n// Merge with existing data\nconst base = $json.data || {};\nconst mergedData = {\n  ...base,\n  decision_results: decisionResults\n};\n\n// Monthly payment calc (principal, APR %, months)\nfunction calcMonthlyPayment(principal, annualRate, months) {\n  if (principal == null || annualRate == null || months == null) return null;\n  if (months === 0) return null;\n  const r = (annualRate / 100) / 12;\n  if (r === 0) return +(principal / months).toFixed(2);\n  const pow = Math.pow(1 + r, months);\n  const payment = principal * r * pow / (pow - 1);\n  return +payment.toFixed(2);\n}\n\n// Standardized fields with robust fallbacks\nconst application_id = mergedData.loan_id || mergedData.application_id || ($json.data && $json.data.loan_id) || $json.loan_id || 'UNKNOWN';\nconst applicant_name = mergedData.borrower_name || mergedData.document_results?.borrower_info?.full_name || mergedData.applicant_name || 'Unknown';\nconst credit_score = mergedData.document_results?.financial_info?.credit_score ?? mergedData.credit_score ?? 0;\nconst loan_amount = mergedData.document_results?.loan_details?.loan_amount ?? mergedData.loan_amount ?? 0;\nconst loan_term_months = (decisionResults.loan_term != null) ? decisionResults.loan_term * 12 : null;\nconst monthly_payment = calcMonthlyPayment(loan_amount, decisionResults.interest_rate ?? null, loan_term_months);\nconst processing_time_seconds = mergedData.processing_time_seconds ?? 0;\nconst risk_score = mergedData.risk_results?.overall_risk_score ?? mergedData.risk_score ?? 0;\nconst status = decisionResults.decision || mergedData.status || 'UNKNOWN';\nconst timestamp = new Date().toISOString();\n\nconst finalData = {\n  ...mergedData,\n  application_id,\n  applicant_name,\n  credit_score,\n  decision: decisionResults.decision || null,\n  decision_reason: decisionResults.reasoning || null,\n  interest_rate: (decisionResults.interest_rate != null) ? decisionResults.interest_rate : null,\n  loan_amount,\n  loan_term_months,\n  monthly_payment: monthly_payment ?? 0,\n  processing_time_seconds,\n  risk_score,\n  status,\n  timestamp\n};\n\nconsole.log('Merged Decision Data:', JSON.stringify(finalData, null, 2));\nreturn [{ json: { data: finalData } }];"
        },
        "id": "6a2af85a-94fa-49fe-9b6c-c2e7583eae24",
        "name": "Merge Decision Results",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          160,
          128
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "22eb967f-bce2-49e8-abe4-7d06c1448d44",
        "name": "Success Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          608,
          128
        ]
      },
      {
        "parameters": {
          "tableName": "loan-decisions",
          "fieldsUi": {
            "fieldValues": [
              { "fieldId": "application_id", "fieldValue": "={{ $json.data.application_id || $json.data.loan_id || 'UNKNOWN' }}" },
              { "fieldId": "applicant_name", "fieldValue": "={{ $json.data.applicant_name || 'Unknown' }}" },
              { "fieldId": "credit_score", "fieldValue": "={{ $json.data.credit_score ?? 0 }}" },
              { "fieldId": "decision", "fieldValue": "={{ $json.data.decision || 'UNKNOWN' }}" },
              { "fieldId": "decision_reason", "fieldValue": "={{ $json.data.decision_reason || '' }}" },
              { "fieldId": "interest_rate", "fieldValue": "={{ $json.data.interest_rate ?? 0 }}" },
              { "fieldId": "loan_amount", "fieldValue": "={{ $json.data.loan_amount ?? 0 }}" },
              { "fieldId": "loan_term_months", "fieldValue": "={{ $json.data.loan_term_months ?? 0 }}" },
              { "fieldId": "monthly_payment", "fieldValue": "={{ $json.data.monthly_payment ?? 0 }}" },
              { "fieldId": "processing_time_seconds", "fieldValue": "={{ $json.data.processing_time_seconds ?? 0 }}" },
              { "fieldId": "risk_score", "fieldValue": "={{ $json.data.risk_score ?? 0 }}" },
              { "fieldId": "status", "fieldValue": "={{ $json.data.status || 'UNKNOWN' }}" },
              { "fieldId": "timestamp", "fieldValue": "={{ $json.data.timestamp || (new Date()).toISOString() }}" }
            ]
          },
          "additionalFields": {}
        },
        "id": "ba0a9db0-5d5f-43d1-a20a-c43626caaebf",
        "name": "Save to DynamoDB",
        "type": "n8n-nodes-base.awsDynamoDb",
        "typeVersion": 1,
        "position": [
          384,
          128
        ],
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      },
    
      {
        "parameters": {
          "options": {}
        },
        "id": "74c2f948-11fe-485c-a7ec-fe09ef3b8ef0",
        "name": "Error Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [
          -1856,
          -176
        ]
      },
      {
        "parameters": {
          "model": "anthropic.claude-3-haiku-20240307-v1:0",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
        "typeVersion": 1.1,
        "position": [
          -1856,
          352
        ],
        "id": "d7709444-223d-4ed3-ab17-a969a6127cd4",
        "name": "Document Processing - AWS Bedrock Titan",
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "You are an expert document processing AI specialist. Analyze loan application documents and extract structured information with high accuracy.\n\nExtract the following information:\n- Borrower: full name, SSN, DOB, contact details, current address\n- Loan Details: requested amount, property address, loan purpose, loan term\n- Financial Info: annual income, employment status, employer name, credit score, monthly debts\n- Documents: list all documents present (pay stubs, tax returns, bank statements, etc.)\n\nReturn JSON with structure:\n{\n  \"document_analysis\": {\n    \"borrower_info\": {\"full_name\": \"string\", \"ssn\": \"string\", \"phone\": \"string\", \"email\": \"string\", \"address\": \"string\"},\n    \"loan_details\": {\"loan_amount\": number, \"property_address\": \"string\", \"loan_purpose\": \"string\", \"loan_term\": number},\n    \"financial_info\": {\"annual_income\": number, \"employment_status\": \"string\", \"credit_score\": number, \"monthly_debt\": number},\n    \"documents_found\": [\"array\"],\n    \"confidence_score\": number\n  }\n}",
          "batching": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.7,
        "position": [
          -1920,
          128
        ],
        "id": "dd7843ea-9dbe-40b2-95a6-8b6c60fcc410",
        "name": "Document Processing Agent"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "You are a Senior Risk Analyst AI. Perform comprehensive risk analysis including credit risk modeling, market risk assessment, and operational risk evaluation.\n\nAnalyze the loan data and provide:\n- Overall risk score (0-100, where higher = more risky)\n- Credit risk assessment\n- Market risk factors\n- Operational risk evaluation\n- Debt-to-income ratio analysis\n- Risk level classification (LOW/MEDIUM/HIGH)\n- Approval recommendation (approve/deny/review)\n- Detailed risk recommendations\n\nReturn JSON with structure:\n{\n  \"risk_analysis\": {\n    \"overall_risk_score\": number,\n    \"credit_risk\": number,\n    \"market_risk\": number,\n    \"operational_risk\": number,\n    \"risk_level\": \"LOW|MEDIUM|HIGH\",\n    \"debt_to_income_ratio\": number,\n    \"recommendations\": [\"array of risk mitigation recommendations\"],\n    \"approval_recommendation\": \"approve|deny|review\"\n  }\n}",
          "batching": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.7,
        "position": [
          -1344,
          128
        ],
        "id": "cc5e0a61-0f56-41f1-bc48-b6adbf7fe424",
        "name": "Risk Assessment"
      },
      {
        "parameters": {
          "model": "anthropic.claude-3-haiku-20240307-v1:0",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
        "typeVersion": 1.1,
        "position": [
          -1280,
          352
        ],
        "id": "0b090d81-2a04-4706-8cf2-ffab5d3afd0a",
        "name": "Risk Assessment - AWS Bedrock Claude",
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      },
      {
        "parameters": {
          "model": "anthropic.claude-3-haiku-20240307-v1:0",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
        "typeVersion": 1.1,
        "position": [
          -704,
          352
        ],
        "id": "aae01914-55d4-40f6-b39f-95689947b909",
        "name": "Compliance Check - AWS Bedrock Claude",
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "You are a Senior Compliance Officer AI. Analyze loan documents for regulatory compliance with key mortgage and lending regulations.\n\nReview compliance with:\n- TRID (TILA-RESPA Integrated Disclosure)\n- HMDA (Home Mortgage Disclosure Act)\n- ECOA (Equal Credit Opportunity Act)\n- CRA (Community Reinvestment Act)\n- FCRA (Fair Credit Reporting Act)\n- GLBA (Gramm-Leach-Bliley Act)\n- AML (Anti-Money Laundering regulations)\n\nProvide:\n- Compliance status for each regulation\n- Overall compliance score (0-100)\n- List of any violations found\n- Compliance risk flags\n- Recommendations for remediation\n\nReturn JSON with structure:\n{\n  \"compliance_results\": {\n    \"compliance_status\": \"compliant|non_compliant|review_needed\",\n    \"regulations_checked\": [\"TRID\", \"HMDA\", \"ECOA\", \"CRA\", \"FCRA\", \"GLBA\", \"AML\"],\n    \"compliance_score\": number,\n    \"violations\": [\"array of violation descriptions\"],\n    \"recommendations\": [\"array of compliance actions needed\"],\n    \"risk_flags\": [\"array of compliance risks\"]\n  }\n}",
          "batching": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.7,
        "position": [
          -768,
          128
        ],
        "id": "ec8c3c8d-181f-4370-ac94-f28c647982e6",
        "name": "Compliance Agent"
      },
      {
        "parameters": {
          "model": "anthropic.claude-3-haiku-20240307-v1:0",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
        "typeVersion": 1.1,
        "position": [
          -128,
          352
        ],
        "id": "ca567db4-1648-49b6-8bef-9d2475852369",
        "name": "Decision Making - AWS Bedrock Claude",
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "You are a Senior Loan Officer AI. Make strategic loan decisions based on comprehensive analysis from document processing, risk assessment, and compliance checks.\n\nBased on all previous assessments, make a final loan approval or denial decision.\n\nConsider:\n- Document analysis results and borrower information\n- Risk assessment scores and risk level\n- Compliance check results and any violations\n- Business objectives and lending criteria\n- Current market conditions\n\nProvide:\n- Final decision (APPROVED/DENIED/CONDITIONAL)\n- Confidence level in the decision (0-1)\n- Recommended interest rate\n- Loan term in years\n- Approved loan amount\n- Any approval conditions\n- Detailed reasoning for the decision\n- Required stipulations or additional documentation\n\nReturn JSON with structure:\n{\n  \"decision_results\": {\n    \"decision\": \"APPROVED|DENIED|CONDITIONAL\",\n    \"confidence\": number,\n    \"interest_rate\": number,\n    \"loan_term\": number,\n    \"approval_amount\": number,\n    \"conditions\": [\"array of approval conditions\"],\n    \"reasoning\": \"detailed explanation\",\n    \"stipulations\": [\"array of required documents or actions\"]\n  }\n}",
          "batching": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.7,
        "position": [
          -192,
          128
        ],
        "id": "e0a9ae52-4d03-460c-b18f-915748e28fac",
        "name": "Decision Making"
      },
      {
        "parameters": {
          "bucketName": "ai-loan-docs-millionaire-20250923-01",
          "fileKey": "={{ $json[\"body\"][\"key\"] }}"
        },
        "type": "n8n-nodes-base.awsS3",
        "typeVersion": 2,
        "position": [
          -2816,
          -128
        ],
        "id": "e5dd1c90-df68-4a59-bf79-9a6000955a54",
        "name": "Download a file",
        "credentials": {
          "aws": {
            "id": "DVs7dBmJBeDHSSO2",
            "name": "AWS account"
          }
        }
      }
    ],
    "pinData": {},
    "connections": {
      "Webhook JSON": {
        "main": [
          [
            {
              "node": "Normalize JSON Input",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "File Upload": {
        "main": [
          [
            {
              "node": "Download a file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Normalize JSON Input": {
        "main": [
          [
            {
              "node": "Enhanced Validation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Document Extraction Agent": {
        "main": [
          [
            {
              "node": "Enhanced Validation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Enhanced Validation": {
        "main": [
          [
            {
              "node": "If Valid",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Valid": {
        "main": [
          [
            {
              "node": "Document Processing Agent",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Error Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Document Results": {
        "main": [
          [
            {
              "node": "Risk Assessment",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Risk Results": {
        "main": [
          [
            {
              "node": "Compliance Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Compliance Results": {
        "main": [
          [
            {
              "node": "Decision Making",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Decision Results": {
        "main": [
          [
            {
              "node": "Save to DynamoDB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save to DynamoDB": {
        "main": [
          [
            {
              "node": "Success Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Document Processing - AWS Bedrock Titan": {
        "ai_languageModel": [
          [
            {
              "node": "Document Processing Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Document Processing Agent": {
        "main": [
          [
            {
              "node": "Merge Document Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Risk Assessment": {
        "main": [
          [
            {
              "node": "Merge Risk Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Risk Assessment - AWS Bedrock Claude": {
        "ai_languageModel": [
          [
            {
              "node": "Risk Assessment",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Compliance Check - AWS Bedrock Claude": {
        "ai_languageModel": [
          [
            {
              "node": "Compliance Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Compliance Agent": {
        "main": [
          [
            {
              "node": "Merge Compliance Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Decision Making - AWS Bedrock Claude": {
        "ai_languageModel": [
          [
            {
              "node": "Decision Making",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Decision Making": {
        "main": [
          [
            {
              "node": "Merge Decision Results",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download a file": {
        "main": [
          [
            {
              "node": "Document Extraction Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": true,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "cef9f581-51be-4c19-a209-dddacb3e9a84",
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "e1d4332a31ff94cc8efabea56e2db8b1aa243117e07b80339b81356f2de6667a"
    },
    "id": "9Tc0OdEVRe6sexSq",
    "tags": []
  }